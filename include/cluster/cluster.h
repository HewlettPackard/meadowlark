/*
 *  (c) Copyright 2016-2017, 2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef CLUSTER_H
#define CLUSTER_H

#include <string>
#include <vector>
#include <iostream>

#include "config.h"

namespace radixtree {

class ResourceManager;
class PartitionManager;
class NodeManager;
class ServerManager;

struct ResourceName {
    ResourceName(std::string name) {
        this->name=name;
    }
    std::string name;

    friend std::ostream& operator<<(std::ostream& os, const ResourceName& name)
    {
        os << name.name;
        return os;
    }
};

struct Location {
    Location(std::string ip="", uint64_t port=0) {
        this->ip=ip;
        this->port=port;
    }
    std::string ip;
    uint64_t port;

    friend std::ostream& operator<<(std::ostream& os, const Location& loc) {
        os << loc.ip << ":" << loc.port;
        return os;
    }

    friend bool operator==(Location const &lhs, Location const &rhs) {
        return lhs.ip == rhs.ip && lhs.port == rhs.port;
    }
};

class Cluster {
public:
    Cluster();
    ~Cluster();

    // read config from file
    void Init(Config &config);

    void Final();

    // find resource
    Location Locate(ResourceName resource, bool random=false);

    // node ID -> KVS 
    std::vector<KVS> FindPartitions(NodeID nid);

    // node ID -> Ports
    std::vector<uint64_t> FindPorts(NodeID nid);

    // print cluster state
    void Print();
private:
    Config *config_;
    ResourceManager *rmgr_;
    PartitionManager *pmgr_;
    NodeManager *nmgr_;
    ServerManager *smgr_;
};

} // namespace radixtree

#endif
