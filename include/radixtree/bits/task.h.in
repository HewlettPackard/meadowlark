/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * Parameterized template Task class 
 *
 * TODO
 * Use C++11 variadic templates to construct a variadic template class 
 * without using preprocessor macros
 *
 */

#define PASTER(x,y) x ## y
#define EVALUATOR(x,y)  PASTER(x,y)
#define CLASS_NAME(PREFIX) EVALUATOR(PREFIX,TASK_NUM_ARGS)

#if TASK_NUM_ARGS > 0
template<
#endif
#if TASK_NUM_ARGS > 0
           typename A1
#endif
#if TASK_NUM_ARGS > 1
         , typename A2 
#endif
#if TASK_NUM_ARGS > 2
         , typename A3
#endif
#if TASK_NUM_ARGS > 0
        >
#endif
class CLASS_NAME(Task): public AbstractTask {
public:
    typedef void (*F)(
#if TASK_NUM_ARGS > 0
                       A1
#endif
#if TASK_NUM_ARGS > 1
                     , A2
#endif
#if TASK_NUM_ARGS > 2
                     , A3
#endif
                     );
    struct Descriptor: AbstractTask::Descriptor {
        Descriptor(JobId job_id, TaskId task_id, F _f
#if TASK_NUM_ARGS > 0
                   , A1 _a1
#endif
#if TASK_NUM_ARGS > 1
                   , A2 _a2
#endif
#if TASK_NUM_ARGS > 2
                   , A3 _a3
#endif
                  )
            : AbstractTask::Descriptor(job_id, task_id, CLASS_NAME(Task)::Open),
                                       f(_f)
#if TASK_NUM_ARGS > 0
                                       , a1(_a1)
#endif
#if TASK_NUM_ARGS > 1
                                       , a2(_a2) 
#endif
#if TASK_NUM_ARGS > 2
                                       , a3(_a3) 
#endif
        { }

        F f;
#if TASK_NUM_ARGS > 0
        A1 a1;
#endif
#if TASK_NUM_ARGS > 1
        A2 a2;
#endif
#if TASK_NUM_ARGS > 2
        A3 a3;
#endif
    };

    Descriptor* descriptor() 
    {
        return static_cast<Descriptor*>(descriptor_);
    }

    static AbstractTask* Open(nvmm::GlobalPtr descriptor_ptr, void* descriptor)
    {
        CLASS_NAME(Task)* task = new CLASS_NAME(Task);
        task->descriptor_ptr_ = descriptor_ptr;
        task->descriptor_ = reinterpret_cast<Descriptor*>(descriptor);
        return task;
    }

public:

    void call() 
    {
        descriptor()->f(
#if TASK_NUM_ARGS > 0
            descriptor()->a1
#endif
#if TASK_NUM_ARGS > 1
            , descriptor()->a2 
#endif
#if TASK_NUM_ARGS > 2
            , descriptor()->a3    
#endif
                      );
    }
};

#undef PASTER
#undef EVALUATOR
#undef CLASS_NAME
