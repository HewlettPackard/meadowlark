/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _RADIXTREE_LOG_H_
#define _RADIXTREE_LOG_H_

#include <boost/log/sources/severity_logger.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/core.hpp>
#include <boost/log/expressions.hpp>
#include <boost/log/sinks/text_file_backend.hpp>
#include <boost/log/utility/setup/file.hpp>
#include <boost/log/utility/setup/common_attributes.hpp>
#include <boost/log/sources/record_ostream.hpp>

namespace radixtree {
    
// severity levels
enum SeverityLevel
{
    all, // turn on all logging
    trace,
    debug,
    info,
    warning,
    error,
    fatal,
    off // turn off any logging
};

// the global logger
extern boost::log::sources::severity_logger_mt<SeverityLevel> logger;

extern bool log_initialized;

// initialize the logger
void init_log(SeverityLevel level);

void init_log(SeverityLevel level, std::string file_name);

    
#define LOG(severity) \
    BOOST_LOG_SEV(logger, severity) << "(" << __FILE__ << ":" << __LINE__ << ") "
             

#define TRACE() \
    BOOST_LOG_SEV(logger, trace) << "(" << __FILE__ << ":" << __LINE__ << ") " << __PRETTY_FUNCTION__

} // namespace radixtree

#endif
