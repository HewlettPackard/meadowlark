/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef RADIX_TREE_H
#define RADIX_TREE_H

#include <functional>

#include "nvmm/memory_manager.h"
#include "nvmm/heap.h"

namespace radixtree {

typedef nvmm::GlobalPtr Gptr;
typedef nvmm::MemoryManager Mmgr;
typedef nvmm::Heap Heap;

class RadixTree {
public:
    typedef unsigned char key_type[40];

    // a radix tree is uniquely identified by the memory manager instance, the heap id, and the root pointer 
    // when Root=0, create a new radix tree with the provied memory manager and heap; get_root() will return the root pointer
    // when Root!=0, open an existing radix tree whose root pointer is Root, with the provied memory manager and heap
    RadixTree(Mmgr *Mmgr, Heap *Heap, Gptr Root=0);
    virtual ~RadixTree();

    // returns the root ptr of the radix tree
    Gptr get_root();

    // fails if an element with the given key is already in the list
    // returns true iff suceeds; if fails, value is still owned by caller
    bool put(const key_type& key, const int key_size, Gptr value);

    // returns 0 if not found
    Gptr get(const key_type& key, const int key_size);

    // returns old value if any; caller owns it
    Gptr destroy (const key_type& key, const int key_size);

    void list(std::function<void(const key_type&, const int, Gptr)> f);


private:
    struct Node;

    Mmgr *mmgr;
    Heap *heap;
    Gptr root;

    RadixTree(const RadixTree&);              // disable copying
    RadixTree& operator=(const RadixTree&);   // disable assignment

    //***************************
    // COMMON HELPERS           *
    //***************************
    // convert global address to local pointer
    void* toLocal(const Gptr &gptr);
    void recursive_list(Gptr parent, std::function<void(const key_type&, const int, Gptr)> f);
};


} // end radixtree

#endif
