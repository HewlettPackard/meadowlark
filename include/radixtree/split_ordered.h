/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef SPLIT_LIST_H
#define SPLIT_LIST_H

#include <cstdint>
#include <functional>

#include "radixtree/common.h" // TagGptr

#include "nvmm/memory_manager.h"
#include "nvmm/heap.h"

#include "split_ordered_metrics.h"

namespace radixtree {

typedef nvmm::GlobalPtr Gptr;
typedef nvmm::MemoryManager Mmgr;
typedef nvmm::Heap Heap;
typedef nvmm::EpochOp Eop;


class SplitOrderedList {
public:
    typedef char ByteKey[40];
    typedef uint64_t UKey;
    typedef uint64_t SoKey;
    typedef uint64_t Value;

    // A split ordered list is uniquely identified by the memory manager 
    // instance, the heap id, and the descriptor pointer.
    // When sld==0, create a new split ordered list with the provived memory 
    // manager and heap; get_descriptor() will return the descriptor pointer
    // When sld!=0, open an existing split ordered list whose descriptor 
    // pointer is sld, with the provided memory manager and heap
    SplitOrderedList(Mmgr *Mmgr, Heap *Heap, SplitOrderedMetrics* Metrics, Gptr sld=0);

    virtual ~SplitOrderedList();

    // returns the descriptor ptr of the split list
    Gptr get_descriptor();

    int FindOrInsert(Eop& op, const ByteKey& byte_key, const size_t byte_key_size, SplitOrderedList::Value& value);

    int Insert(Eop& op, const ByteKey& key, const size_t byte_key_size, Value value);
    
    int InsertOrUpdate(Eop& op, const ByteKey& key, const size_t byte_key_size, Value value, Gptr* old_ptr);

    // returns 0 if not found
    Value Find(Eop& op, const ByteKey& key, const size_t byte_key_size);

    // returns old value if any; caller owns it
    int Delete(Eop& op, const ByteKey& key, const size_t byte_key_size, Gptr* ocurptr);

    void foreach(std::function<void(SplitOrderedList*, SplitOrderedList::ByteKey, size_t, SplitOrderedList::Value)> f);

    template<typename T>
    T* toLocal(const Gptr &gptr) 
    {
        return (T*) mmgr_->GlobalToLocal(gptr);
    }


private:
    struct Node;
    struct Descriptor;

    Mmgr *mmgr_;
    Heap *heap_;
    SplitOrderedMetrics *metrics;
    Descriptor* descriptor_;
    Gptr descriptor_ptr_;

    SplitOrderedList(const SplitOrderedList&);              // disable copying
    SplitOrderedList& operator=(const SplitOrderedList&);   // disable assignment

    template<typename T>
    Gptr toGlobal(T* ptr);

    Value ListFind(Eop& op, TagGptr *head_tgptr, const ByteKey& byte_key, size_t byte_key_size, SoKey key, TagGptr **oprev_ptr, TagGptr  *ocur_ptr, TagGptr  *onext_ptr);
    int ListInsert(Eop& op, TagGptr *head_tgptr, TagGptr node_ptr, TagGptr *ocur_ptr);
    int ListDelete(Eop& op, TagGptr *head_tgptr, const ByteKey& byte_key, size_t byte_key_size, SoKey key, TagGptr* ocur_ptr);

    void InitializeBucket (Eop& op, uint64_t bucket);
};

} // end radixtree

#endif
