/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef SPLIT_LIST_H
#define SPLIT_LIST_H

#include <cstdint>
#include <functional>

#include "nvmm/memory_manager.h"
#include "nvmm/heap.h"

namespace radixtree {

typedef nvmm::GlobalPtr Gptr;
typedef nvmm::MemoryManager Mmgr;
typedef nvmm::Heap Heap;

class SplitOrderedList {
public:
    typedef unsigned int Hash;
    typedef uint64_t Key;
    typedef uint64_t SoKey;
    typedef uint64_t Value;

    // a radix tree is uniquely identified by the memory manager instance, the heap id, and the root pointer 
    // when Root=0, create a new radix tree with the provied memory manager and heap; get_root() will return the root pointer
    // when Root!=0, open an existing radix tree whose root pointer is Root, with the provied memory manager and heap
    SplitOrderedList(Mmgr *Mmgr, Heap *Heap, Gptr sld=0);

    virtual ~SplitOrderedList();

    // returns the descriptor ptr of the split list
    Gptr get_descriptor();

    int Insert(const Key& key, Value value);

    // returns 0 if not found
    Value Find(const Key& key);

    // returns old value if any; caller owns it
    int Delete(const Key& key, Gptr* ocurptr);

    void foreach(void (*f)(SplitOrderedList* so, SplitOrderedList::Key, SplitOrderedList::Value));


    template<typename T>
    T* toLocal(const Gptr &gptr) {
        return (T*) mmgr_->GlobalToLocal(gptr);
    }


private:
    struct Node;
    struct Descriptor;

    Mmgr *mmgr_;
    Heap *heap_;
    Descriptor* descriptor_;
    Gptr descriptor_ptr_;

    SplitOrderedList(const SplitOrderedList&);              // disable copying
    SplitOrderedList& operator=(const SplitOrderedList&);   // disable assignment

    template<typename T>
    Gptr toGlobal(T* ptr);

    Value ListFind(Gptr *head_ptr, SoKey key, Gptr **oprev_ptr, Gptr  *ocur_ptr, Gptr  *onext_ptr);
    int ListInsert(Gptr *head_ptr, Gptr node_ptr, Gptr *ocur_ptr);
    int ListDelete(Gptr *head_ptr, SoKey key, Gptr* ocur_ptr);

    void InitializeBucket (uint64_t bucket);
};


} // end radixtree

#endif
