/*
 *  (c) Copyright 2016-2017, 2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef RADIXTREE_COMMON_H
#define RADIXTREE_COMMON_H

#include <cstdint>
#include "nvmm/global_ptr.h"

namespace radixtree {

using Gptr = nvmm::GlobalPtr;

struct TagGptr {
    typedef uint8_t Mark;
    typedef uint64_t Tag;

    TagGptr()
    {
        gptr_ = 0;
        tag_ = 0;
    }

    TagGptr(uint64_t gptr)
    {
        gptr_ = gptr;
        tag_ = 0;
    }

    TagGptr(Gptr gptr, Tag tag) // no mark!
    {
        gptr_ = gptr;
        tag_ = tag;
    }

    TagGptr(Mark mark, Gptr gptr, Tag tag)
    {
        gptr_ = gptr_mask(gptr) | (mark & 1);
        tag_ = tag;
    }

    Mark mark() const
    {
        return gptr_ & 1;
    }

    Gptr gptr() const
    {
        return gptr_mask(gptr_);
    }

    Gptr gptr_nomark() const // no mark!
    {
        return gptr_;
    }

    Tag tag() const
    {
        return tag_;
    }

    Gptr gptr_mask(Gptr p) const
    {
        return p & ~(Gptr)1;
    }

    // valid == gptr is not null
    bool IsValid() const {
        return ((Gptr)gptr_).IsValid();
    }

    union {
        struct {
            uint64_t gptr_;
            Tag tag_;
        };
        int64_t i64[2];
    };
};

inline bool operator== (const TagGptr &pt1,
                        const TagGptr &pt2)
{
    return pt1.gptr() == pt2.gptr() &&
           pt1.mark() == pt2.mark() &&
           pt1.tag() == pt2.tag();
}

inline bool operator!= (const TagGptr &pt1,
                        const TagGptr &pt2)
{
    return !(pt1 == pt2);
}

} // end radixtree

#endif
