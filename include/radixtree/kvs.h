/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef KVS_H
#define KVS_H

#include <cstddef> // size_t

#include "nvmm/global_ptr.h"

namespace radixtree {

// TODO: use std::string instead of buf + size?
class KeyValueStore {
public:
    virtual ~KeyValueStore(){};

    static void Start();
    static void Reset();
    static KeyValueStore *MakeKVS(int choice, nvmm::GlobalPtr location);

    // insert if key does not exist; update if key exists
    virtual int Put (char const *key, size_t const key_len,
		     char const *val, size_t const val_len) = 0;

    virtual int Get (char const *key, size_t const key_len,
		     char *val, size_t &val_len) = 0;

    virtual int Del (char const *key, size_t const key_len) = 0;

    // scan APIs
    virtual int Scan (int &iter_handle,
                      char *key, size_t &key_len,
                      char *val, size_t &val_len,
                      char const *begin_key, size_t const begin_key_len,
                      bool const begin_key_inclusive,
                      char const *end_key, size_t const end_key_len,
                      bool const end_key_inclusive){return -1;};

    virtual int GetNext(int iter_handle,
                        char *key, size_t &key_len,
                        char *val, size_t &val_len){return -1;};

    static constexpr const char *OPEN_BOUNDARY_KEY = "\0";
    static constexpr const size_t OPEN_BOUNDARY_KEY_SIZE = 1;

    // return the root global pointer of the kvs
    virtual nvmm::GlobalPtr Location () = 0;

    // return max key len
    virtual size_t MaxKeyLen() = 0;

    // return max value len
    virtual size_t MaxValLen() = 0;
};

} // namespace radixtree

#endif
