/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef KVS_RADIX_TREE_H
#define KVS_RADIX_TREE_H

#include <stddef.h>
#include <stdint.h>
#include <limits>

#include "nvmm/global_ptr.h"
#include "nvmm/shelf_id.h"
#include "nvmm/memory_manager.h"
#include "nvmm/epoch_manager.h"
#include "nvmm/heap.h"

#include "radixtree/kvs.h"
#include "radixtree/radix_tree.h"


namespace radixtree {
// TODO: error codes!

using Emgr = nvmm::EpochManager;
using Eop = nvmm::EpochOp;

class KVSRadixTree : public KeyValueStore {
public:
    static size_t const kMaxKeyLen = sizeof(RadixTree::key_type); // 40 bytes
    static size_t const kMaxValLen = std::numeric_limits<size_t>::max();

    KVSRadixTree(Gptr root);
    ~KVSRadixTree();

    int Put (char const *key, size_t const key_len,
	     char const *val, size_t const val_len);

    int Get (char const *key, size_t const key_len,
	     char *val, size_t &val_len);

    int Del (char const *key, size_t const key_len);

    Gptr Location () {return root_;}

    size_t MaxKeyLen() {return kMaxKeyLen;}
    size_t MaxValLen() {return kMaxValLen;}

private:
    struct ValBuf {
        size_t size;
        char val[0];
    };

    static nvmm::PoolId const heap_id_ = 2;
    static size_t const heap_size_ = 1024*1024*1024; // 1024MB

    Mmgr *mmgr_;
    Emgr *emgr_;
    Heap *heap_;

    RadixTree *tree_;
    Gptr root_;

    int Open();
    int Close();
};

} // namespace radixtree

#endif
