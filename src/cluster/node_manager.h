/*
 *  (c) Copyright 2016-2017, 2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef NODE_MANAGER_H
#define NODE_MANAGER_H

#include <map>
#include <vector>

#include "cluster/config.h"

namespace radixtree {

struct Node {
    Node() {}

    Node(std::vector<Port> ports) {
        this->ports=ports;
    }

    std::vector<Port> ports;

    friend std::ostream& operator<<(std::ostream& os, const Node& node)
    {
        for(Port i:node.ports)
            os << i << " ";
        return os;
    }
};


class NodeManager {
public:
    NodeManager(Config *config);
    ~NodeManager();

    void Init();
    Node GetNode(NodeID n);
    ServerID FindServer(NodeID n);

    void Print();
private:
    Config *config_;
    size_t node_cnt_;
    size_t server_cnt_;
    uint64_t starting_port_;
    Config::ReplicationScheme replication_scheme_;
    uint64_t replication_factor_;

    std::map<NodeID, Node> node_;
    std::map<NodeID, ServerID> node2server_;
    std::map<ServerID, std::vector<NodeID>> server2node_;
};

} // namespace radixtree

#endif
