/*
 *  (c) Copyright 2016-2017, 2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include <assert.h>
#include <map>
#include <iostream>

#include "cluster/config.h"
#include "server_manager.h"

namespace radixtree {

ServerManager::ServerManager(Config *config) {
    assert(config && config->IsValid());
    config_=config;
}

ServerManager::~ServerManager() {
}

void ServerManager::Init() {
    // load server info from config
    for(auto &s:config_->GetServers()) {
        server_[s.first]=Server(s.second);
    }
}

Server ServerManager::GetServer(ServerID s) {
    auto found = server_.find(s);
    if(found!=server_.end())
        return found->second;
    else
        return Server();
}

void ServerManager::Print() {
    std::cout << "ServerManager " << std::endl;
    std::cout << "- Servers " << std::endl;
    for(auto &server:server_) {
        std::cout << " - Server " << server.first << ": " << server.second << std::endl;
    }
}

} // namespace radixtree
