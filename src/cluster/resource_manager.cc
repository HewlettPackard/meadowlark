/*
 *  (c) Copyright 2016-2017, 2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include <assert.h>
#include <cstddef> // size_t
#include <functional> // hash
#include <iostream>

#include "cluster/config.h"
#include "resource_manager.h"

namespace radixtree {

ResourceManager::ResourceManager(Config *config) {
    assert(config && config->IsValid());
    config_=config;
}

ResourceManager::~ResourceManager() {
}

void ResourceManager::Init() {
    static size_t const hash_max = std::numeric_limits<size_t>::max();
    partition_cnt_ = config_->GetPartitionCnt();
    assert(partition_cnt_>0);
    range_per_partition_ = hash_max/partition_cnt_;
}

PartitionID ResourceManager::FindPartition(Resource r) {
    return (PartitionID)(std::hash<std::string>()(r.key)/range_per_partition_);
}

void ResourceManager::Print() {
    std::cout << "ResrouceManager " << std::endl;
    std::cout << "range_per_partition: " << range_per_partition_ << std::endl;
}

} // namespace radixtree
