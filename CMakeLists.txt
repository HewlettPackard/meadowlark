cmake_minimum_required(VERSION 2.8.11)
project(radixtree)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif()

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

#
# default system include and link directories
#
link_directories(/usr/lib)
include_directories(/usr/include)
link_directories(/usr/local/lib)
include_directories(/usr/local/include)


#
# build type: Release (default) or Debug
#
message(STATUS "====================")
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif()
if(CMAKE_BUILD_TYPE MATCHES Debug)
  message(STATUS "Build type: Debug")
elseif(CMAKE_BUILD_TYPE MATCHES Release)
  message(STATUS "Build type: Release")
else()
  message(STATUS "Invalid build type: ${CMAKE_BUILD_TYPE}")
  message(STATUS "Default to : Release")
  set(CMAKE_BUILD_TYPE "Release")
endif()

#
# determine endianness at compile time
#
include(TestBigEndian)
test_big_endian(result)
if(${result})
  add_definitions(-DSYS_BIG_ENDIAN)
  message(STATUS "Current system is big-endian")
else(${result})
  add_definitions(-DSYS_LITTLE_ENDIAN)
  message(STATUS "Current system is little-endian")
endif(${result})

if(BUILD_ONLY_LIBRARY)
   message(STATUS "Building only libraries")
endif()

#
# determine tmpfs/lfs location
#
if(FAME) # FAME
  add_definitions(-DFAME)
  set(TMPFS_PATH "/lfs")
  message(STATUS "LFS enabled")
  message(STATUS "Lfs location: ${TMPFS_PATH}")
else() # NUMA
  set(TMPFS_PATH "/dev/shm")
  message(STATUS "tmpfs location: ${TMPFS_PATH}")
endif()

#
# determine shelf base dir. Used to store files backing the shelves
#
if(FAME)
  set(SHELF_BASE_DIR "${TMPFS_PATH}")
else()
  set(SHELF_BASE_DIR "${TMPFS_PATH}/$ENV{USER}")
endif()
add_definitions(-DSHELF_USER="$ENV{USER}")
add_definitions(-DSHELF_BASE_DIR="${SHELF_BASE_DIR}")
message(STATUS "Shelf base dir: ${SHELF_BASE_DIR}")

#
# enable logging
#
if(LOG)
  message(STATUS "logging: on")
  add_definitions(-DPRINT_LOG)
else()
  message(STATUS "logging: off")
endif()

#
# which implementation to use? PMEM=ON: pmem_invalidate + load; PMEM=OFF: fam_atomics
#
if(PMEM)
  add_definitions(-DPMEM)
  message(STATUS "implementation: use pmem")
else()
  message(STATUS "implementation: use fam_atomics")
endif()

#
# enable metrics collection
#
if(METRICS)
  add_definitions(-DMETRICS)
  message(STATUS "Metrics enabled")
else() # METRICS
  message(STATUS "Metrics disabled")
endif()

#
# add boost
#
set(BOOST_ROOT $ENV{BOOST_ROOT})
find_package(Boost 1.55 COMPONENTS log log_setup thread system filesystem REQUIRED)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  link_directories(${Boost_LIBRARY_DIR})
  #message(STATUS "${Boost_INCLUDE_DIR}")
  #message(STATUS "${Boost_LIBRARY_DIR}")       
endif()


# for boost::log
add_definitions(-DBOOST_LOG_DYN_LINK)


message(STATUS "====================")


#
# common gcc flags
#
set(CMAKE_CXX_FLAGS "-std=c++11")
set(CMAKE_CXX_FLAGS
  "${CMAKE_CXX_FLAGS} -Wall -W -Wextra -Wredundant-decls -Wunused -Wunused-macros -Wno-unused-parameter -Wcast-qual -Wcast-align -Wwrite-strings -Wmissing-field-initializers -Wendif-labels -Winit-self -Wlogical-op -Wpacked -Wstack-protector -Wformat=2 -Wswitch-enum -Wstrict-overflow=5 -Wpointer-arith -Wnormalized=nfc -Wno-long-long -Wconversion -Wunreachable-code")  

# Flags that are currently not used: -Wshadow -Wpadded
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-invalid-offsetof ") # to suppress warnings about offsetof

#
# gcc flags for release build
#
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -g -O2")

#
# gcc flags for debug build
#
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -DDEBUG -O0 -g")

#
# header-files directory and library for nvmm
#
find_package(NVMM REQUIRED)
include_directories(${NVMM_INCLUDE_DIR})
#link_directories(${NVMM_LIBRARY})

#
# add libpmem  
#
find_package(Pmem REQUIRED)

set(ARCH_LIBS ${ARCH_LIBS} ${PMEM_LIBRARY})

if(NOT PMEM_HAS_PMEM_INVALIDATE)
  add_definitions(-DPMEM_INVALIDATE_NOOP)
endif()

#
# use libfam_atomic?
#
if(USE_FAM_ATOMIC)
  message(STATUS "atomics library: FAM")
  find_package(FamAtomic REQUIRED)
  set(ARCH_LIBS ${ARCH_LIBS} ${FAM_ATOMIC_LIBRARY})
else()
  message(STATUS "atomics library: native")
  add_definitions(-DFAM_ATOMIC_NATIVE)
endif()
# #
# # add libpmem and lib_fam_atomic
# #
# set(ARCH_LIBS pmem fam_atomic)

if(NOT BUILD_ONLY_LIBRARY)
  #
  # enable GTest
  #
  enable_testing()
  #find_package(GTest REQUIRED)
  #include_directories(${GTEST_INCLUDE_DIR})
endif()

#
# include directories
#
include_directories(${PROJECT_SOURCE_DIR}/include) # public headers (include)
include_directories(${PROJECT_SOURCE_DIR}/src) # private headers (src)
include_directories(${PROJECT_SOURCE_DIR}/test) # test headers (test)

#
# third-party libraries
#
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
add_subdirectory(third-party)
include_directories(${PROJECT_SOURCE_DIR}/third-party/cityhash/src)
if(NOT BUILD_ONLY_LIBRARY)
  set(GTEST_ROOT ${PROJECT_SOURCE_DIR}/third-party/gtest)
  include_directories(${PROJECT_SOURCE_DIR}/third-party/gtest/include)
  include_directories(${PROJECT_SOURCE_DIR}/third-party/medida-1a488e5/src/medida)
  include_directories(${PROJECT_SOURCE_DIR}/third-party/yaml-cpp-release-0.5.3/include)
  include_directories(${PROJECT_BINARY_DIR}/third-party/libmemcached-1.0.18/include)
  link_directories(${PROJECT_BINARY_DIR}/third-party/libmemcached-1.0.18/lib)
endif()

#
# add source code
#
add_subdirectory(src)


#
# add test code
#

# create base shelf dir
if(FAME) # FAME
  add_custom_target(
  radixtree_shelf_base_dir
  COMMAND ${CMAKE_COMMAND} -E echo ${SHELF_BASE_DIR}
  COMMENT show shelf base dir
)
else() # NUMA
  add_custom_target(
  radixtree_shelf_base_dir
  COMMAND ${CMAKE_COMMAND} -E make_directory ${SHELF_BASE_DIR}
  COMMENT create shelf base dir
)
endif()
if(NOT BUILD_ONLY_LIBRARY)
  add_subdirectory(test)
  add_subdirectory(bin)
endif()
